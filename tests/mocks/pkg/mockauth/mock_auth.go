// Code generated by mockery v2.10.0. DO NOT EDIT.

package mockauth

import (
	jwt "github.com/dgrijalva/jwt-go"
	mock "github.com/stretchr/testify/mock"

	model "github.com/icaroribeiro/new-go-code-challenge-template-2/internal/core/domain/model"
)

// Auth is an autogenerated mock type for the IAuth type
type Auth struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: _a0, tokenExpTimeInSec
func (_m *Auth) CreateToken(_a0 model.Auth, tokenExpTimeInSec int) (string, error) {
	ret := _m.Called(_a0, tokenExpTimeInSec)

	var r0 string
	if rf, ok := ret.Get(0).(func(model.Auth, int) string); ok {
		r0 = rf(_a0, tokenExpTimeInSec)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Auth, int) error); ok {
		r1 = rf(_a0, tokenExpTimeInSec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodeToken provides a mock function with given fields: tokenString
func (_m *Auth) DecodeToken(tokenString string) (*jwt.Token, error) {
	ret := _m.Called(tokenString)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAuthFromToken provides a mock function with given fields: token
func (_m *Auth) FetchAuthFromToken(token *jwt.Token) (model.Auth, error) {
	ret := _m.Called(token)

	var r0 model.Auth
	if rf, ok := ret.Get(0).(func(*jwt.Token) model.Auth); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(model.Auth)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateTokenRenewal provides a mock function with given fields: tokenString, timeBeforeTokenExpTimeInSec
func (_m *Auth) ValidateTokenRenewal(tokenString string, timeBeforeTokenExpTimeInSec int) (*jwt.Token, error) {
	ret := _m.Called(tokenString, timeBeforeTokenExpTimeInSec)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string, int) *jwt.Token); ok {
		r0 = rf(tokenString, timeBeforeTokenExpTimeInSec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(tokenString, timeBeforeTokenExpTimeInSec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
