# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - internal/presentation/graphql-api/gqlgen/graph/schema/*.graphql

# Where should the generated server code go?
exec:
  layout: follow-schema
  dir: internal/presentation/graphql-api/gqlgen/graph/generated
  package: generated
# exec:
#   filename: internal/presentation/graphql-api/gqlgen/graph/generated/generated.go
#   package: generated

# Uncomment to enable federation
# federation:
#   filename: graph/generated/federation.go
#   package: generated

# Where should any generated models go?
model:
  filename: internal/presentation/graphql-api/gqlgen/graph/entity/entitys_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: internal/presentation/graphql-api/gqlgen/graph/resolver
  package: resolver
  filename_template: "{name}.resolvers.go"

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/icaroribeiro/new-go-code-challenge-template-2/internal/presentation/graphql-api/gqlgen/graph/entity"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  HealthCheck:
    model: 
      - "github.com/icaroribeiro/new-go-code-challenge-template-2/internal/presentation/graphql-api/gqlgen/graph/entity.HealthCheck"
  UUID:
    model: 
      - "github.com/icaroribeiro/new-go-code-challenge-template-2/internal/presentation/graphql-api/gqlgen/graph/entity.UUID"
  User:
    model: 
      - "github.com/icaroribeiro/new-go-code-challenge-template-2/internal/presentation/graphql-api/gqlgen/graph/entity.User"
  Credentials:
    model:
      - "github.com/icaroribeiro/new-go-code-challenge-template-2/pkg/security.Credentials"
  Passwords:
    model:
      - "github.com/icaroribeiro/new-go-code-challenge-template-2/pkg/security.Passwords"
  # ID:
  #   model:
  #     - github.com/99designs/gqlgen/graphql.ID
  #     - github.com/99designs/gqlgen/graphql.Int
  #     - github.com/99designs/gqlgen/graphql.Int64
  #     - github.com/99designs/gqlgen/graphql.Int32
  # Int:
  #   model:
  #     - github.com/99designs/gqlgen/graphql.Int
  #     - github.com/99designs/gqlgen/graphql.Int64
  #     - github.com/99designs/gqlgen/graphql.Int32
