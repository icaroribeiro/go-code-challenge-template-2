// Code generated by mockery v2.10.0. DO NOT EDIT.

package login

import (
	login "github.com/icaroribeiro/new-go-code-challenge-template-2/internal/core/ports/infrastructure/storage/datastore/repository/login"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	model "github.com/icaroribeiro/new-go-code-challenge-template-2/internal/core/domain/model"
)

// Repository is an autogenerated mock type for the IRepository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Repository) Create(_a0 model.Login) (model.Login, error) {
	ret := _m.Called(_a0)

	var r0 model.Login
	if rf, ok := ret.Get(0).(func(model.Login) model.Login); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.Login)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Login) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id string) (model.Login, error) {
	ret := _m.Called(id)

	var r0 model.Login
	if rf, ok := ret.Get(0).(func(string) model.Login); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Login)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: userID
func (_m *Repository) GetByUserID(userID string) (model.Login, error) {
	ret := _m.Called(userID)

	var r0 model.Login
	if rf, ok := ret.Get(0).(func(string) model.Login); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(model.Login)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: username
func (_m *Repository) GetByUsername(username string) (model.Login, error) {
	ret := _m.Called(username)

	var r0 model.Login
	if rf, ok := ret.Get(0).(func(string) model.Login); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(model.Login)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, _a1
func (_m *Repository) Update(id string, _a1 model.Login) (model.Login, error) {
	ret := _m.Called(id, _a1)

	var r0 model.Login
	if rf, ok := ret.Get(0).(func(string, model.Login) model.Login); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Get(0).(model.Login)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, model.Login) error); ok {
		r1 = rf(id, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithDBTrx provides a mock function with given fields: dbTrx
func (_m *Repository) WithDBTrx(dbTrx *gorm.DB) login.IRepository {
	ret := _m.Called(dbTrx)

	var r0 login.IRepository
	if rf, ok := ret.Get(0).(func(*gorm.DB) login.IRepository); ok {
		r0 = rf(dbTrx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(login.IRepository)
		}
	}

	return r0
}
