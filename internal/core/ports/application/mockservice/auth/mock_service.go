// Code generated by mockery v2.10.0. DO NOT EDIT.

package auth

import (
	entity "github.com/icaroribeiro/go-code-challenge-template-2/internal/core/domain/entity"
	auth "github.com/icaroribeiro/go-code-challenge-template-2/internal/core/ports/application/service/auth"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	security "github.com/icaroribeiro/go-code-challenge-template-2/pkg/security"
)

// Service is an autogenerated mock type for the IService type
type Service struct {
	mock.Mock
}

// LogIn provides a mock function with given fields: credentials
func (_m *Service) LogIn(credentials security.Credentials) (string, error) {
	ret := _m.Called(credentials)

	var r0 string
	if rf, ok := ret.Get(0).(func(security.Credentials) string); ok {
		r0 = rf(credentials)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(security.Credentials) error); ok {
		r1 = rf(credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogOut provides a mock function with given fields: id
func (_m *Service) LogOut(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyPassword provides a mock function with given fields: id, passwords
func (_m *Service) ModifyPassword(id string, passwords security.Passwords) error {
	ret := _m.Called(id, passwords)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, security.Passwords) error); ok {
		r0 = rf(id, passwords)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: credentials
func (_m *Service) Register(credentials security.Credentials) (string, error) {
	ret := _m.Called(credentials)

	var r0 string
	if rf, ok := ret.Get(0).(func(security.Credentials) string); ok {
		r0 = rf(credentials)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(security.Credentials) error); ok {
		r1 = rf(credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenewToken provides a mock function with given fields: _a0
func (_m *Service) RenewToken(_a0 entity.Auth) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(entity.Auth) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Auth) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithDBTrx provides a mock function with given fields: dbTrx
func (_m *Service) WithDBTrx(dbTrx *gorm.DB) auth.IService {
	ret := _m.Called(dbTrx)

	var r0 auth.IService
	if rf, ok := ret.Get(0).(func(*gorm.DB) auth.IService); ok {
		r0 = rf(dbTrx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.IService)
		}
	}

	return r0
}
